version: 2.1

executors:
  android-executor:
    docker:
      - image: cimg/android:2024.04-browsers
    working_directory: ~/app

jobs:
  android-build:
    executor: android-executor
    steps:
      - checkout
      - run:
          name: Install Node Dependencies & Capacitor Platforms
          command: |
            rm package-lock.json
            npm i
      - run:
          name: Update Version
          command: |
            # Read current version
            VERSION=$(cat version.txt)
            VERSION_NAME=$(echo $VERSION | cut -d'+' -f1)
            VERSION_CODE=$(echo $VERSION | cut -d'+' -f2)

            # Increment version
            MAJOR=$(echo $VERSION_NAME | cut -d'.' -f1)
            MINOR=$(echo $VERSION_NAME | cut -d'.' -f2)
            PATCH=$(echo $VERSION_NAME | cut -d'.' -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION_NAME="$MAJOR.$MINOR.$NEW_PATCH"
            NEW_VERSION_CODE=$((VERSION_CODE + 1))
            NEW_VERSION="$NEW_VERSION_NAME+$NEW_VERSION_CODE"

            echo "Updating version from $VERSION to $NEW_VERSION"

            # Update version.txt
            echo $NEW_VERSION > version.txt

            # Update package.json
            sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$NEW_VERSION_NAME\"/" package.json

            # Export for later steps
            echo "export APP_VERSION=$NEW_VERSION" >> $BASH_ENV
            echo "export APP_VERSION_NAME=$NEW_VERSION_NAME" >> $BASH_ENV
            echo "export APP_VERSION_CODE=$NEW_VERSION_CODE" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Add Capacitor Platforms (android)
          command: |
            npx cap add android
      - run:
          name: Update Android Version
          command: |
            # Update the Android version in build.gradle
            sed -i "s/versionCode [0-9]*/versionCode $APP_VERSION_CODE/" android/app/build.gradle
            sed -i "s/versionName \"[^\"]*\"/versionName \"$APP_VERSION_NAME\"/" android/app/build.gradle
            cat android/app/build.gradle
      - run:
          name: Build Web App
          command: npm run build
      - run:
          name: Capacitor Sync & Copy
          command: |
            npx cap sync
            npx cap copy
      - run:
          name: Generate icons and splashscreens
          command: |
            npx capacitor-assets generate
      - run:
          name: Add debug keystore
          command: |
            mkdir -p android/app/debug-keys
            echo "$DEBUG_KEY_B64" | base64 -d > android/app/debug-keys/debug.jks
      - run:
          name: Ensure build-tools and apksigner are available
          command: |
            sdkmanager "build-tools;34.0.0"
      - run:
          name: Add apksigner to PATH for subsequent steps
          command: |
            echo 'export PATH=$PATH:$ANDROID_HOME/build-tools/34.0.0' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Build Android APK
          command: |
            npx cap build android
      - store_artifacts:
          path: android/app/build/outputs/apk/release/app-release-signed.apk
          destination: app-release-signed.apk
      - run:
          name: Git Commit and Push Version Update
          command: |
            # Configure git
            git config --global user.email "ci@circleci.com"
            git config --global user.name "CircleCI"
            
            # Commit version changes
            git add version.txt package.json
            git commit -m "Bump version to $APP_VERSION [skip ci]"
            
            # Create and push tag
            git tag v$APP_VERSION_NAME
            # Push changes and tag
            git push origin HEAD
            git push origin v$APP_VERSION_NAME

      - run:
          name: Generate Release Notes
          command: |
            # Get previous tag (or fallback to last 10 commits)
            prev_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -z "$prev_tag" ]; then
              release_notes=$(git log --pretty=format:"- %s" HEAD~10..HEAD)
            else
              release_notes=$(git log --pretty=format:"- %s" "$prev_tag"..HEAD)
            fi

            # Prepare request text for Gemini API
            request=$(echo "$release_notes" | tr "\n" " " | sed "s/[[:space:]]*$//")

            # Call Gemini API to summarize top 4-5 features as numbered points
            response=$(curl -s \
              -H "Content-Type: application/json" \
              -d "{\"contents\":[{\"parts\":[{\"text\":\"From the following release notes, highlight only the top 10 (MAX, can be less) user-facing features or meaningful changes. Ignore version bump or changelog housekeeping notes like 'Version bump to 1.0.2+3'. Output only numbered points:\n$request\"}]}]}" \
              -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY")

            # Extract the summary text and save to file
            echo "$response" | jq -r ".candidates[0].content.parts[0].text" > release_notes.txt

            # Print the generated release notes
            echo "### Generated Release Notes ###"
            cat release_notes.txt

      - run:
          name: Notify Discord (Success)
          when: on_success
          command: |
            ARTIFACT_URL="https://output.circle-artifacts.com/output/job/$CIRCLE_WORKFLOW_JOB_ID/artifacts/0/app-release-signed.apk"
            NOTES=$(cat release_notes.txt | sed ':a;N;$!ba;s/\n/\\n/g')
            PAYLOAD="{
              \"embeds\": [{
                \"title\": \"✅ Android APK Build Succeeded\",
                \"color\": 65280,
                \"fields\": [
                  { \"name\": \"Version\", \"value\": \"$APP_VERSION_NAME ($APP_VERSION_CODE)\", \"inline\": true },
                  { \"name\": \"Download\", \"value\": \"[Click to download]($ARTIFACT_URL)\", \"inline\": true },
                  { \"name\": \"Release Notes\", \"value\": \"$NOTES\" }
                ]
              }]
            }"
            curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"

      - run:
          name: Notify Discord (Failure)
          when: on_fail
          command: |
            PAYLOAD="{
              \"embeds\": [{
                \"title\": \"❌ Android APK Build Failed\",
                \"color\": 16711680,
                \"fields\": [
                  { \"name\": \"Version\", \"value\": \"$APP_VERSION_NAME ($APP_VERSION_CODE)\" },
                  { \"name\": \"Workflow\", \"value\": \"${CIRCLE_WORKFLOW_ID}\" },
                  { \"name\": \"Details\", \"value\": \"[View Build](${CIRCLE_BUILD_URL})\" }
                ]
              }]
            }"
            curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"

workflows:
  version: 2
  capacitor-build:
    jobs:
      - android-build
