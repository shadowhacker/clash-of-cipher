version: 2.1

executors:
  android-executor:
    docker:
      - image: cimg/android:2024.04-browsers
    working_directory: ~/app

jobs:
  android-build:
    executor: android-executor
    steps:
      - checkout
      - run:
          name: Install Node Dependencies & Capacitor Platforms
          command: |
            rm -f package-lock.json
            npm i
      - run:
          name: Add Capacitor Platforms (android)
          command: |
            npx cap add android
      - run:
          name: Build Web App
          command: npm run build
      - run:
          name: Capacitor Sync & Copy
          command: |
            npx cap sync
            npx cap copy
      - run:
          name: Add icons and splashscreens
          command: |
            npx capacitor-assets generate
      - run:
          name: Add debug keystore
          command: |
            mkdir -p android/app/debug-keys
            echo "$DEBUG_KEY_B64" | base64 -d > android/app/debug-keys/debug.jks
      - run:
          name: Ensure build-tools and apksigner are available
          command: |
            sdkmanager "build-tools;34.0.0"
      - run:
          name: Add apksigner to PATH for subsequent steps
          command: |
            echo 'export PATH=$PATH:$ANDROID_HOME/build-tools/34.0.0' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Bump version and code, ensure unique tag
          command: |
            # Extract version name and code from version.json
            VERSION_FULL=$(jq -r '.version' version.json)
            VERSION_NAME=$(echo "$VERSION_FULL" | cut -d'+' -f1)
            VERSION_CODE=$(echo "$VERSION_FULL" | cut -d'+' -f2)

            # Always increment patch version and reset code to 1
            VERSION_NAME=$(echo "$VERSION_NAME" | awk -F. '{$NF = $NF + 1; OFS="."; print $0}')
            NEW_VERSION_CODE=1
            NEW_VERSION="$VERSION_NAME+$NEW_VERSION_CODE"

            # Ensure unique git tag
            TAG="v$NEW_VERSION"
            while git rev-parse "$TAG" >/dev/null 2>&1; do
              NEW_VERSION_CODE=$((NEW_VERSION_CODE + 1))
              NEW_VERSION="$VERSION_NAME+$NEW_VERSION_CODE"
              TAG="v$NEW_VERSION"
            done

            # Update version.json with new version string
            jq --arg v "$NEW_VERSION" '.version = $v' version.json > version.json.tmp && mv version.json.tmp version.json

            # Update only version name in package.json
            jq --arg v "$VERSION_NAME" '.version = $v' package.json > package.json.tmp && mv package.json.tmp package.json


              NEW_VERSION=$(echo $NEW_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            done
            jq --arg v "$NEW_VERSION" '.version = $v' version.json > tmp.json && mv tmp.json version.json
            echo "export NEW_VERSION=$NEW_VERSION" >> $BASH_ENV
            echo "export NEW_VERSION_CODE=$NEW_VERSION_CODE" >> $BASH_ENV
      - run:
          name: Sync version to package.json and Android
          command: |
            source $BASH_ENV
            if [ -f package.json ]; then
              jq --arg v "$NEW_VERSION" '.version = $v' package.json > tmp.json && mv tmp.json package.json
            fi
            if [ -f android/app/build.gradle ]; then
              sed -i "s/versionName \".*\"/versionName \"$NEW_VERSION\"/" android/app/build.gradle
              sed -i "s/versionCode .*/versionCode $NEW_VERSION_CODE/" android/app/build.gradle
            fi
      - run:
          name: Commit and tag version bump as CircleCI bot
          command: |
            git config user.name "circleci-bot"
            git config user.email "ci-bot@yourdomain.com"
            git add version.json package.json android/app/build.gradle
            git commit -m "Bump version to $NEW_VERSION" \
              -m "[ci skip] Auto version bump on main push" \
              --author="circleci-bot <ci-bot@yourdomain.com>" || echo "No changes to commit"
            git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
            git push origin HEAD:${CIRCLE_BRANCH}
            git push origin v$NEW_VERSION
      - run:
          name: Generate concise release notes with Gemini (non-blocking)
          command: |
            set +e
            prev_tag=$(git tag --sort=-creatordate | sed -n 2p)
            release_notes=$(git log --pretty=format:"- %s" "$prev_tag"..HEAD)
            request=$(echo "$release_notes" | tr '\n' ' ' | sed 's/- //' | sed 's/[[:space:]]*$//')
            if [ -z "$GEMINI_API_KEY" ]; then
              echo "Error: GEMINI_API_KEY environment variable is not set. Skipping API call."
              echo "$release_notes" > release_notes.txt # fallback
            else
              response=$(curl -s \
                -H 'Content-Type: application/json' \
                -d "{\"contents\":[{\"parts\":[{\"text\":\"Highlight top 4-10 features (max, can be less) only from following release notes. Don't include version upgrade message or minor changes message. Don't give any description just the numeric points: $request\"}]}]}" \
                -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY")
              if [[ -n "$response" ]]; then
                echo "$response" | jq -r '.candidates[0].content.parts[0].text' > release_notes.txt
                echo "Release notes have been written to release_notes.txt"
              else
                echo "Error: Failed to get response from Gemini API."
                echo "$release_notes" > release_notes.txt # fallback
              fi
            fi
            set -e
      - run:
          name: Build Android APK
          command: |
            npx cap build android
      - store_artifacts:
          path: android/app/build/outputs/apk/release/app-release-signed.apk
          destination: app-release-signed.apk
      - run:
          name: Notify Discord (Success)
          when: on_success
          command: |
            ARTIFACT_URL="https://output.circle-artifacts.com/output/job/$CIRCLE_WORKFLOW_JOB_ID/artifacts/0/app-release-signed.apk"
            NOTES=$(cat release_notes.txt)
            VERSION=$(jq -r '.version' version.json)
            PAYLOAD="{\"content\":\"✅ Android APK build succeeded!\n\n**Version:** $VERSION\n\n**Release Notes:**\n$NOTES\n\n[Download Artifact]($ARTIFACT_URL)\"}"
            curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
      - run:
          name: Notify Discord (Failure)
          when: on_fail
          command: |
            PAYLOAD="{\"content\":\"❌ Android APK build failed for ${CIRCLE_PROJECT_REPONAME} in workflow ${CIRCLE_WORKFLOW_ID}. See details: ${CIRCLE_BUILD_URL}\"}"
            curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
workflows:
  version: 2
  capacitor-build:
    jobs:
      - android-build
