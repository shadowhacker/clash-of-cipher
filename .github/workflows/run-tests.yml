name: Clash of Cipher Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install canvas dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libjpeg-dev libpango1.0-dev libgif-dev build-essential g++

      - name: Run Jest tests with coverage
        run: npm run test:coverage

      - name: Run basic tests
        run: npm run test:basic

      - name: Create beautiful test summary
        if: always()
        run: |
          echo "# 🧘 Dhyanam Test Results" > test-results.md
          echo "## 🧪 Jest Test Coverage" >> test-results.md
          echo "" >> test-results.md

          # Extract coverage data in a clean format
          echo "### 📊 Overall Coverage" >> test-results.md
          echo "" >> test-results.md
          echo "| Category | Coverage | Covered/Total |" >> test-results.md
          echo "|----------|----------|---------------|" >> test-results.md

          # Parse the lcov.info file to create a beautiful coverage summary
          STATEMENTS=$(grep -A 1 "SF:" coverage/lcov.info | grep -v "SF:" | grep -v "\-\-" | grep "LF:" | awk -F: '{s+=$2} END {print s}')
          COVERED_STATEMENTS=$(grep -A 1 "SF:" coverage/lcov.info | grep -v "SF:" | grep -v "\-\-" | grep "LH:" | awk -F: '{s+=$2} END {print s}')
          BRANCHES=$(grep -A 1 "SF:" coverage/lcov.info | grep -v "SF:" | grep -v "\-\-" | grep "BRF:" | awk -F: '{s+=$2} END {print s}')
          COVERED_BRANCHES=$(grep -A 1 "SF:" coverage/lcov.info | grep -v "SF:" | grep -v "\-\-" | grep "BRH:" | awk -F: '{s+=$2} END {print s}')
          FUNCTIONS=$(grep -A 1 "SF:" coverage/lcov.info | grep -v "SF:" | grep -v "\-\-" | grep "FNF:" | awk -F: '{s+=$2} END {print s}')
          COVERED_FUNCTIONS=$(grep -A 1 "SF:" coverage/lcov.info | grep -v "SF:" | grep -v "\-\-" | grep "FNH:" | awk -F: '{s+=$2} END {print s}')

          # Calculate percentages
          STMT_PCT=$(awk "BEGIN {print int(($COVERED_STATEMENTS/$STATEMENTS)*100)}")
          BRANCH_PCT=$(awk "BEGIN {print int(($COVERED_BRANCHES/$BRANCHES)*100)}")
          FUNC_PCT=$(awk "BEGIN {print int(($COVERED_FUNCTIONS/$FUNCTIONS)*100)}")

          # Create emoji indicators
          STMT_EMOJI="🔴"
          if [ "$STMT_PCT" -ge 80 ]; then STMT_EMOJI="🟢"; 
          elif [ "$STMT_PCT" -ge 50 ]; then STMT_EMOJI="🟡"; fi

          BRANCH_EMOJI="🔴"
          if [ "$BRANCH_PCT" -ge 80 ]; then BRANCH_EMOJI="🟢"; 
          elif [ "$BRANCH_PCT" -ge 50 ]; then BRANCH_EMOJI="🟡"; fi

          FUNC_EMOJI="🔴"
          if [ "$FUNC_PCT" -ge 80 ]; then FUNC_EMOJI="🟢"; 
          elif [ "$FUNC_PCT" -ge 50 ]; then FUNC_EMOJI="🟡"; fi

          # Write the table rows
          echo "| Statements | $STMT_EMOJI $STMT_PCT% | $COVERED_STATEMENTS/$STATEMENTS |" >> test-results.md
          echo "| Branches | $BRANCH_EMOJI $BRANCH_PCT% | $COVERED_BRANCHES/$BRANCHES |" >> test-results.md
          echo "| Functions | $FUNC_EMOJI $FUNC_PCT% | $COVERED_FUNCTIONS/$FUNCTIONS |" >> test-results.md

          echo "" >> test-results.md
          echo "### 📁 Files With Low Coverage" >> test-results.md
          echo "" >> test-results.md
          echo "| File | Type | Coverage | Details |" >> test-results.md
          echo "|------|------|----------|---------|" >> test-results.md

          # Find files with less than 50% coverage
          FILES=$(grep "SF:" coverage/lcov.info | awk -F: '{print $2}')
          for FILE in $FILES; do
            NEXT_FILE=$(grep -A 50 "SF:$FILE" coverage/lcov.info | grep -m 1 -n "SF:" | cut -d: -f1)
            if [ -z "$NEXT_FILE" ]; then
              FILE_CONTENT=$(grep -A 100 "SF:$FILE" coverage/lcov.info)
            else
              FILE_CONTENT=$(grep -A $NEXT_FILE "SF:$FILE" coverage/lcov.info | head -n $(($NEXT_FILE-1)))
            fi
            
            FILE_STATEMENTS=$(echo "$FILE_CONTENT" | grep "LF:" | awk -F: '{print $2}')
            FILE_COVERED_STATEMENTS=$(echo "$FILE_CONTENT" | grep "LH:" | awk -F: '{print $2}')
            FILE_PCT=$(awk "BEGIN {print int(($FILE_COVERED_STATEMENTS/$FILE_STATEMENTS)*100)}")
            
            if [ "$FILE_PCT" -lt 50 ]; then
              FILENAME=$(basename "$FILE")
              echo "| \`$FILENAME\` | Statements | $FILE_PCT% | $FILE_COVERED_STATEMENTS/$FILE_STATEMENTS |" >> test-results.md
            fi
          done

          echo "" >> test-results.md
          echo "## 🚀 Basic Tests" >> test-results.md
          echo "" >> test-results.md

      - name: Archive test artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-report
          path: |
            coverage/
            test-results.md

      # Add GitHub Pages deployment of coverage report
      - name: Deploy coverage report to GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage/lcov-report
          destination_dir: coverage-report
          keep_files: true
